---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-db-part0
  name: configurator-db-part0
spec:
  ports:
    - name: "3307"
      port: 3307
      targetPort: 3306
  selector:
    io.kompose.service: configurator-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-db-part1
  name: configurator-db-part1
spec:
  ports:
    - name: "3313"
      port: 3313
      targetPort: 3306
  selector:
    io.kompose.service: configurator-db-part1
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: expose-api
  name: expose-api
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: expose-api
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: expose-api-db
  name: expose-api-db
spec:
  ports:
    - name: "1433"
      port: 1433
      targetPort: 1433
  selector:
    io.kompose.service: expose-api-db
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: grafana
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    - name: "9093"
      port: 9093
      targetPort: 9093
  selector:
    io.kompose.service: kafka
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: mail-db-part0
  name: mail-db-part0
spec:
  ports:
    - name: "3308"
      port: 3308
      targetPort: 3306
  selector:
    io.kompose.service: mail-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: mail-db-part1
  name: mail-db-part1
spec:
  ports:
    - name: "3314"
      port: 3314
      targetPort: 3306
  selector:
    io.kompose.service: mail-db-part1
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-db-part0
  name: notifier-db-part0
spec:
  ports:
    - name: "3309"
      port: 3309
      targetPort: 3306
  selector:
    io.kompose.service: notifier-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-db-part1
  name: notifier-db-part1
spec:
  ports:
    - name: "3315"
      port: 3315
      targetPort: 3306
  selector:
    io.kompose.service: notifier-db-part1
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    io.kompose.service: prometheus
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-db-part0
  name: scheduler-db-part0
spec:
  ports:
    - name: "3310"
      port: 3310
      targetPort: 3306
  selector:
    io.kompose.service: scheduler-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-db-part1
  name: scheduler-db-part1
spec:
  ports:
    - name: "3316"
      port: 3316
      targetPort: 3306
  selector:
    io.kompose.service: scheduler-db-part1
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-db-part0
  name: telegram-db-part0
spec:
  ports:
    - name: "3311"
      port: 3311
      targetPort: 3306
  selector:
    io.kompose.service: telegram-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-db-part1
  name: telegram-db-part1
spec:
  ports:
    - name: "3317"
      port: 3317
      targetPort: 3306
  selector:
    io.kompose.service: telegram-db-part1
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: weather-db-part0
  name: weather-db-part0
spec:
  ports:
    - name: "3312"
      port: 3312
      targetPort: 3306
  selector:
    io.kompose.service: weather-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: weather-db-part1
  name: weather-db-part1
spec:
  ports:
    - name: "3318"
      port: 3318
      targetPort: 3306
  selector:
    io.kompose.service: weather-db-part1
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
  selector:
    io.kompose.service: zookeeper
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-db-part0
  name: configurator-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: configurator-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: configurator-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: configurator-db-part0
          name: configurator-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3307
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: configurator-database-part0
      restartPolicy: Always
      volumes:
        - name: configurator-database-part0
          persistentVolumeClaim:
            claimName: configurator-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-database-part0
  name: configurator-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-db-part1
  name: configurator-db-part1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: configurator-db-part1
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: configurator-db-part1
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: configurator-db-part1
          name: configurator-db-part1
          ports:
            - containerPort: 3306
              hostPort: 3313
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: configurator-database-part1
      restartPolicy: Always
      volumes:
        - name: configurator-database-part1
          persistentVolumeClaim:
            claimName: configurator-database-part1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-database-part1
  name: configurator-database-part1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-service-part0-rep0
  name: configurator-service-part0-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: configurator-service-part0-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: configurator-service-part0-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: ConfiguratorService
            - name: DATABASE_IP
              value: configurator-db-part0
            - name: DATABASE_NAME
              value: ConfigurationAlert
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: ConfiguratorService
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: ConfiguratorService
          image: configurator-service-part0-rep0
          name: configurator-service-part0-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-service-part1-rep0
  name: configurator-service-part1-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: configurator-service-part1-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: configurator-service-part1-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: ConfiguratorService
            - name: DATABASE_IP
              value: configurator-db-part1
            - name: DATABASE_NAME
              value: ConfigurationAlert
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: ConfiguratorService
            - name: PARTITION
              value: "1"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: ConfiguratorService
          image: configurator-service-part1-rep0
          name: configurator-service-part1-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: expose-api
  name: expose-api
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: expose-api
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: expose-api
    spec:
      containers:
        - env:
            - name: AllowedHosts
              value: '*'
            - name: ConnectionStrings
              value: Data Source=expose-api-db,1433;Initial Catalog=Userdata;User ID=sa;Password=RootRoot.1; Encrypt=False;
            - name: ConnectionStringsMaster
              value: Data Source=expose-api-db,1433;User ID=sa;Password=RootRoot.1;Encrypt=False;
            - name: HowManyPartition
              value: "2"
            - name: Jwt
              value: c5eKUcbKfkzGq6HfpnFhP7/G2pgS3S++YH33ue/A5uc=
            - name: Logging:LogLevel:Default
              value: Information
            - name: Logging:LogLevel:Microsoft.AspNetCore
              value: Warning
            - name: bootstrapServers
              value: kafka:9093
            - name: groupID
              value: ExposeAPIService
          image: expose-api
          name: expose-api
          ports:
            - containerPort: 8080
              hostPort: 8080
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: expose-api-db
  name: expose-api-db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: expose-api-db
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: expose-api-db
    spec:
      containers:
        - env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_PID
              value: Express
            - name: SA_PASSWORD
              value: RootRoot.1
          image: mcr.microsoft.com/mssql/server
          name: expose-api-db
          ports:
            - containerPort: 1433
              hostPort: 1433
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/opt/mssql
              name: userdata-database
      restartPolicy: Always
      volumes:
        - name: userdata-database
          persistentVolumeClaim:
            claimName: userdata-database
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: userdata-database
  name: userdata-database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: grafana
    spec:
      containers:
        - env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
          image: grafana/grafana
          name: grafana-service
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-data
      restartPolicy: Always
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: grafana-data
  name: grafana-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: kafka
    spec:
      containers:
        - env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: INSIDE://kafka:9093,OUTSIDE://localhost:9092
            - name: KAFKA_CREATE_TOPICS
              value: topic_to_scheduler:2:0,topic_to_weather:2:0,topic_to_mail:2:0,topic_to_telegram:2:0,topic_to_notifier:2:0,topic_to_configuration:2:0,topic_to_userdata:2:0
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INSIDE
            - name: KAFKA_LISTENERS
              value: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
          image: wurstmeister/kafka:latest
          name: kafka-service
          ports:
            - containerPort: 9092
              hostPort: 9092
              protocol: TCP
            - containerPort: 9093
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: kafka-claim0
            - mountPath: /var/lib/kafka/data
              name: kafka-data
      restartPolicy: Always
      volumes:
        - name: kafka-claim0
          persistentVolumeClaim:
            claimName: kafka-claim0
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: kafka-claim0
  name: kafka-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: kafka-data
  name: kafka-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: mail-db-part0
  name: mail-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mail-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: mail-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mail-db-part0
          name: mail-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3308
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mail-database-part0
      restartPolicy: Always
      volumes:
        - name: mail-database-part0
          persistentVolumeClaim:
            claimName: mail-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mail-database-part0
  name: mail-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: mail-db-part1
  name: mail-db-part1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mail-db-part1
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: mail-db-part1
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mail-db-part1
          name: mail-db-part1
          ports:
            - containerPort: 3306
              hostPort: 3314
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mail-database-part1
      restartPolicy: Always
      volumes:
        - name: mail-database-part1
          persistentVolumeClaim:
            claimName: mail-database-part1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mail-database-part1
  name: mail-database-part1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: mail-service-part0-rep0
  name: mail-service-part0-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mail-service-part0-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: mail-service-part0-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: MailService
            - name: DATABASE_IP
              value: mail-db-part0
            - name: DATABASE_NAME
              value: Mail
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: MailService
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: MailService
          image: mail-service-part0-rep0
          name: mail-service-part0-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: mail-service-part1-rep0
  name: mail-service-part1-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mail-service-part1-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: mail-service-part1-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: MailService
            - name: DATABASE_IP
              value: mail-db-part1
            - name: DATABASE_NAME
              value: Mail
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: MailService
            - name: PARTITION
              value: "1"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: MailService
          image: mail-service-part1-rep0
          name: mail-service-part1-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-db-part0
  name: notifier-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: notifier-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: notifier-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: notifier-db-part0
          name: notifier-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3309
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: notifier-database-part0
      restartPolicy: Always
      volumes:
        - name: notifier-database-part0
          persistentVolumeClaim:
            claimName: notifier-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-database-part0
  name: notifier-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-db-part1
  name: notifier-db-part1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: notifier-db-part1
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: notifier-db-part1
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: notifier-db-part1
          name: notifier-db-part1
          ports:
            - containerPort: 3306
              hostPort: 3315
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: notifier-database-part1
      restartPolicy: Always
      volumes:
        - name: notifier-database-part1
          persistentVolumeClaim:
            claimName: notifier-database-part1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-database-part1
  name: notifier-database-part1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-service-part0-rep0
  name: notifier-service-part0-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: notifier-service-part0-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: notifier-service-part0-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: NotifierService
            - name: DATABASE_IP
              value: notifier-db-part0
            - name: DATABASE_NAME
              value: Notifier
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: NotifierService
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: NotifierService
          image: notifier-service-part0-rep0
          name: notifier-service-part0-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-service-part1-rep0
  name: notifier-service-part1-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: notifier-service-part1-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: notifier-service-part1-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: NotifierService
            - name: DATABASE_IP
              value: notifier-db-part1
            - name: DATABASE_NAME
              value: Notifier
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: NotifierService
            - name: PARTITION
              value: "1"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: NotifierService
          image: notifier-service-part1-rep0
          name: notifier-service-part1-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: prometheus
    spec:
      containers:
        - args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --web.enable-lifecycle
          image: prom/prometheus
          name: prometheus-service
          ports:
            - containerPort: 9090
              hostPort: 9090
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-claim0
      restartPolicy: Always
      volumes:
        - name: prometheus-claim0
          persistentVolumeClaim:
            claimName: prometheus-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus-claim0
  name: prometheus-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-db-part0
  name: scheduler-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scheduler-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: scheduler-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: scheduler-db-part0
          name: scheduler-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3310
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: scheduler-database-part0
      restartPolicy: Always
      volumes:
        - name: scheduler-database-part0
          persistentVolumeClaim:
            claimName: scheduler-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-database-part0
  name: scheduler-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-db-part1
  name: scheduler-db-part1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scheduler-db-part1
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: scheduler-db-part1
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: scheduler-db-part1
          name: scheduler-db-part1
          ports:
            - containerPort: 3306
              hostPort: 3316
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: scheduler-database-part1
      restartPolicy: Always
      volumes:
        - name: scheduler-database-part1
          persistentVolumeClaim:
            claimName: scheduler-database-part1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-database-part1
  name: scheduler-database-part1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-service-part0-rep0
  name: scheduler-service-part0-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scheduler-service-part0-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: scheduler-service-part0-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: SchedulerService
            - name: DATABASE_IP
              value: scheduler-db-part0
            - name: DATABASE_NAME
              value: Scheduler
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: SchedulerService
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: SchedulerService
          image: scheduler-service-part0-rep0
          name: scheduler-service-part0-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-service-part1-rep0
  name: scheduler-service-part1-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scheduler-service-part1-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: scheduler-service-part1-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: SchedulerService
            - name: DATABASE_IP
              value: scheduler-db-part1
            - name: DATABASE_NAME
              value: Scheduler
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: SchedulerService
            - name: PARTITION
              value: "1"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: SchedulerService
          image: scheduler-service-part1-rep0
          name: scheduler-service-part1-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-db-part0
  name: telegram-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: telegram-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: telegram-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: telegram-db-part0
          name: telegram-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3311
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: telegram-database-part0
      restartPolicy: Always
      volumes:
        - name: telegram-database-part0
          persistentVolumeClaim:
            claimName: telegram-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-database-part0
  name: telegram-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-db-part1
  name: telegram-db-part1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: telegram-db-part1
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: telegram-db-part1
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: telegram-db-part1
          name: telegram-db-part1
          ports:
            - containerPort: 3306
              hostPort: 3317
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: telegram-database-part1
      restartPolicy: Always
      volumes:
        - name: telegram-database-part1
          persistentVolumeClaim:
            claimName: telegram-database-part1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-database-part1
  name: telegram-database-part1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-service-part0-rep0
  name: telegram-service-part0-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: telegram-service-part0-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: telegram-service-part0-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: TelegramService
            - name: DATABASE_IP
              value: telegram-db-part0
            - name: DATABASE_NAME
              value: Telegram
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: TelegramService
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: TelegramService
          image: telegram-service-part0-rep0
          name: telegram-service-part0-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-service-part1-rep0
  name: telegram-service-part1-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: telegram-service-part1-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: telegram-service-part1-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: TelegramService
            - name: DATABASE_IP
              value: telegram-db-part1
            - name: DATABASE_NAME
              value: Telegram
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: TelegramService
            - name: PARTITION
              value: "1"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: TelegramService
          image: telegram-service-part1-rep0
          name: telegram-service-part1-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: weather-db-part0
  name: weather-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: weather-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: weather-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: weather-db-part0
          name: weather-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3312
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: weather-database-part0
      restartPolicy: Always
      volumes:
        - name: weather-database-part0
          persistentVolumeClaim:
            claimName: weather-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: weather-database-part0
  name: weather-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: weather-db-part1
  name: weather-db-part1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: weather-db-part1
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: weather-db-part1
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: weather-db-part1
          name: weather-db-part1
          ports:
            - containerPort: 3306
              hostPort: 3318
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: weather-database-part1
      restartPolicy: Always
      volumes:
        - name: weather-database-part1
          persistentVolumeClaim:
            claimName: weather-database-part1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: weather-database-part1
  name: weather-database-part1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: weather-service-part0-rep0
  name: weather-service-part0-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: weather-service-part0-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: weather-service-part0-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: WeatherService
            - name: DATABASE_IP
              value: weather-db-part0
            - name: DATABASE_NAME
              value: Weather
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: WeatherService
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: WeatherService
          image: weather-service-part0-rep0
          name: weather-service-part0-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: weather-service-part1-rep0
  name: weather-service-part1-rep0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: weather-service-part1-rep0
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: weather-service-part1-rep0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: WeatherService
            - name: DATABASE_IP
              value: weather-db-part1
            - name: DATABASE_NAME
              value: Weather
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3306"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: WeatherService
            - name: PARTITION
              value: "1"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: WeatherService
          image: weather-service-part1-rep0
          name: weather-service-part1-rep0
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: zookeeper
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Users\m.antona\source\repos\WeatherEventNotifier\kompose-windows-amd64.exe convert --file docker-compose.yml --out ./k8s/kubemanifest.yaml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: zookeeper
    spec:
      containers:
        - image: wurstmeister/zookeeper:latest
          name: zookeeper
          ports:
            - containerPort: 2181
              hostPort: 2181
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

