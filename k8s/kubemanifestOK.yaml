---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: configurator-db-part0
  name: configurator-db-part0
spec:
  ports:
    - name: "3307"
      port: 3307
      targetPort: 3306
  selector:
    io.kompose.service: configurator-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: configurator-service-part0
  name: configurator-service-part0
spec:
  ports:
    - name: "8084"
      port: 8084
      targetPort: 8084
  selector:
    io.kompose.service: configurator-service-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: expose-api
  name: expose-api
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: expose-api
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: expose-api-db
  name: expose-api-db
spec:
  ports:
    - name: "1433"
      port: 1433
      targetPort: 1433
  selector:
    io.kompose.service: expose-api-db
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: forecast-service
  name: forecast-service
spec:
  ports:
    - name: "8083"
      port: 8083
      targetPort: 8083
  selector:
    io.kompose.service: forecast-service
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: grafana
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  ports:
    - name: "9093"
      port: 9093
      targetPort: 9093
  selector:
    io.kompose.service: kafka
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: mail-db-part0
  name: mail-db-part0
spec:
  ports:
    - name: "3308"
      port: 3308
      targetPort: 3306
  selector:
    io.kompose.service: mail-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: mail-service-part0
  name: mail-service-part0
spec:
  ports:
    - name: "8085"
      port: 8085
      targetPort: 8085
  selector:
    io.kompose.service: mail-service-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: notifier-db-part0
  name: notifier-db-part0
spec:
  ports:
    - name: "3309"
      port: 3309
      targetPort: 3306
  selector:
    io.kompose.service: notifier-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: notifier-service-part0
  name: notifier-service-part0
spec:
  ports:
    - name: "8086"
      port: 8086
      targetPort: 8086
  selector:
    io.kompose.service: notifier-service-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'expose-api'
        scrape_interval: 5s 
        static_configs:
          - targets: ['expose-api:8080']
        tls_config:
          insecure_skip_verify: true
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    io.kompose.service: prometheus
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: scheduler-db-part0
  name: scheduler-db-part0
spec:
  ports:
    - name: "3310"
      port: 3310
      targetPort: 3306
  selector:
    io.kompose.service: scheduler-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: scheduler-service-part0
  name: scheduler-service-part0
spec:
  ports:
    - name: "8087"
      port: 8087
      targetPort: 8087
  selector:
    io.kompose.service: scheduler-service-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: sla-manager
  name: sla-manager
spec:
  ports:
    - name: "8081"
      port: 8081
      targetPort: 8081
  selector:
    io.kompose.service: sla-manager
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: sla-manager-db
  name: sla-manager-db
spec:
  ports:
    - name: "1434"
      port: 1434
      targetPort: 1433
  selector:
    io.kompose.service: sla-manager-db
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: sla-manager-service
  name: sla-manager-service
spec:
  ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
  selector:
    io.kompose.service: sla-manager-service
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: telegram-db-part0
  name: telegram-db-part0
spec:
  ports:
    - name: "3311"
      port: 3311
      targetPort: 3306
  selector:
    io.kompose.service: telegram-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: telegram-service-part0
  name: telegram-service-part0
spec:
  ports:
    - name: "8088"
      port: 8088
      targetPort: 8088
  selector:
    io.kompose.service: telegram-service-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: weather-db-part0
  name: weather-db-part0
spec:
  ports:
    - name: "3312"
      port: 3312
      targetPort: 3306
  selector:
    io.kompose.service: weather-db-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: weather-service-part0
  name: weather-service-part0
spec:
  ports:
    - name: "8089"
      port: 8089
      targetPort: 8089
  selector:
    io.kompose.service: weather-service-part0
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
  selector:
    io.kompose.service: zookeeper
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: configurator-db-part0
  name: configurator-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: configurator-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: configurator-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mirco98/weathereventnotifier:configurator-db-part0
          name: configurator-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3307
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: configurator-database-part0
      restartPolicy: Always
      volumes:
        - name: configurator-database-part0
          persistentVolumeClaim:
            claimName: configurator-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: configurator-database-part0
  name: configurator-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: configurator-service-part0
  name: configurator-service-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: configurator-service-part0
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: configurator-service-part0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: ConfiguratorService
            - name: DATABASE_IP
              value: configurator-db-part0
            - name: DATABASE_NAME
              value: ConfigurationAlert
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3307"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: ConfiguratorService
            - name: HEARTBEAT_FREQUENCY
              value: "10"
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: ConfiguratorService
            - name: SLAMANAGER
              value: sla-manager
          image: mirco98/weathereventnotifier:configurator-service-part0
          name: configurator-service-part0
          ports:
            - containerPort: 8084
              hostPort: 8084
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: expose-api
  name: expose-api
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: expose-api
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: expose-api
    spec:
      containers:
        - env:
            - name: AllowedHosts
              value: '*'
            - name: ConnectionStrings
              value: Data Source=expose-api-db,1433;Initial Catalog=Userdata;User ID=sa;Password=RootRoot.1; Encrypt=False;
            - name: ConnectionStringsMaster
              value: Data Source=expose-api-db,1433;User ID=sa;Password=RootRoot.1;Encrypt=False;
            - name: HowManyPartition
              value: "1"
            - name: Jwt
              value: c5eKUcbKfkzGq6HfpnFhP7/G2pgS3S++YH33ue/A5uc=
            - name: bootstrapServers
              value: kafka:9093
            - name: groupID
              value: ExposeAPIService
          image: mirco98/weathereventnotifier:expose-api
          name: expose-api
          ports:
            - containerPort: 8080
              hostPort: 8080
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: expose-api-db
  name: expose-api-db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: expose-api-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: expose-api-db
    spec:
      containers:
        - env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_PID
              value: Express
            - name: SA_PASSWORD
              value: RootRoot.1
          image: mcr.microsoft.com/mssql/server
          name: expose-api-db
          ports:
            - containerPort: 1433
              hostPort: 1433
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/opt/mssql
              name: userdata-database
      restartPolicy: Always
      volumes:
        - name: userdata-database
          persistentVolumeClaim:
            claimName: userdata-database
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: userdata-database
  name: userdata-database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: forecast-service
  name: forecast-service
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: forecast-service
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: forecast-service
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: ForecastService
            - name: DATABASE_IP
              value: sla-manager-db
            - name: DATABASE_NAME
              value: SLAManager
            - name: DATABASE_PASSWORD
              value: RootRoot.1
            - name: DATABASE_PORTA
              value: "1434"
            - name: DATABASE_USERNAME
              value: sa
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: ForecastService
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: ForecastService
          image: mirco98/weathereventnotifier:forecast-service
          name: forecast-service
          ports:
            - containerPort: 8083
              hostPort: 8083
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: grafana
    spec:
      containers:
        - env:
            - name: GF_INSTALL_PLUGINS
              value: grafana-piechart-panel,grafana-worldmap-panel,vertamedia-clickhouse-datasource
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_USERS_DEFAULT_THEME
              value: light
          image: grafana/grafana
          name: grafana-service
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-claim0
      restartPolicy: Always
      volumes:
        - name: grafana-claim0
          persistentVolumeClaim:
            claimName: grafana-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: grafana-claim0
  name: grafana-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: kafka
    spec:
      containers:
        - env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: INSIDE://kafka:9093
            - name: KAFKA_CREATE_TOPICS
              value: topic_to_scheduler:1:1,topic_to_weather:1:1,topic_to_mail:1:1,topic_to_telegram:1:1,topic_to_notifier:1:1,topic_to_configuration:1:1,topic_to_userdata:1:1,topic_to_manager:1:1,topic_to_forecast:1:1
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INSIDE
            - name: KAFKA_LISTENERS
              value: INSIDE://0.0.0.0:9093
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: INSIDE:PLAINTEXT
            - name: KAFKA_PORT
              value: "9093"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
          image: wurstmeister/kafka:latest
          name: kafka-service
          ports:
            - containerPort: 9093
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: kafka-claim0
            - mountPath: /var/lib/kafka/data
              name: kafka-data
      restartPolicy: Always
      volumes:
        - name: kafka-claim0
          persistentVolumeClaim:
            claimName: kafka-claim0
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: kafka-claim0
  name: kafka-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: kafka-data
  name: kafka-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: mail-db-part0
  name: mail-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mail-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: mail-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mirco98/weathereventnotifier:mail-db-part0
          name: mail-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3308
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mail-database-part0
      restartPolicy: Always
      volumes:
        - name: mail-database-part0
          persistentVolumeClaim:
            claimName: mail-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mail-database-part0
  name: mail-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: mail-service-part0
  name: mail-service-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mail-service-part0
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: mail-service-part0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: MailService
            - name: DATABASE_IP
              value: mail-db-part0
            - name: DATABASE_NAME
              value: Mail
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3308"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: MailService
            - name: HEARTBEAT_FREQUENCY
              value: "10"
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: MailService
            - name: SLAMANAGER
              value: sla-manager
          image: mirco98/weathereventnotifier:mail-service-part0
          name: mail-service-part0
          ports:
            - containerPort: 8085
              hostPort: 8085
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: notifier-db-part0
  name: notifier-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: notifier-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: notifier-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mirco98/weathereventnotifier:notifier-db-part0
          name: notifier-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3309
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: notifier-database-part0
      restartPolicy: Always
      volumes:
        - name: notifier-database-part0
          persistentVolumeClaim:
            claimName: notifier-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: notifier-database-part0
  name: notifier-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: notifier-service-part0
  name: notifier-service-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: notifier-service-part0
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: notifier-service-part0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: NotifierService
            - name: DATABASE_IP
              value: notifier-db-part0
            - name: DATABASE_NAME
              value: Notifier
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3309"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: NotifierService
            - name: HEARTBEAT_FREQUENCY
              value: "10"
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: NotifierService
            - name: SLAMANAGER
              value: sla-manager
          image: mirco98/weathereventnotifier:notifier-service-part0
          name: notifier-service-part0
          ports:
            - containerPort: 8086
              hostPort: 8086
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: prometheus
    spec:
      containers:
        - args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --web.enable-lifecycle
          image: prom/prometheus
          name: prometheus-service
          ports:
            - containerPort: 9090
              hostPort: 9090
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-claim0
            - mountPath: /etc/prometheus/data
              name: prometheus-data
      restartPolicy: Always
      volumes:
        - name: prometheus-claim0
          persistentVolumeClaim:
            claimName: prometheus-claim0
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus-claim0
  name: prometheus-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus-data
  name: prometheus-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: scheduler-db-part0
  name: scheduler-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scheduler-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: scheduler-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mirco98/weathereventnotifier:scheduler-db-part0
          name: scheduler-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3310
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: scheduler-database-part0
      restartPolicy: Always
      volumes:
        - name: scheduler-database-part0
          persistentVolumeClaim:
            claimName: scheduler-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: scheduler-database-part0
  name: scheduler-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: scheduler-service-part0
  name: scheduler-service-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scheduler-service-part0
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: scheduler-service-part0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: SchedulerService
            - name: DATABASE_IP
              value: scheduler-db-part0
            - name: DATABASE_NAME
              value: Scheduler
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3310"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: SchedulerService
            - name: HEARTBEAT_FREQUENCY
              value: "10"
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: SchedulerService
            - name: SLAMANAGER
              value: sla-manager
          image: mirco98/weathereventnotifier:scheduler-service-part0
          name: scheduler-service-part0
          ports:
            - containerPort: 8087
              hostPort: 8087
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: sla-manager
  name: sla-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: sla-manager
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: sla-manager
    spec:
      containers:
        - env:
            - name: AllowedHosts
              value: '*'
            - name: ConnectionStrings
              value: Data Source=sla-manager-db,1434;Initial Catalog=SLAManager;User ID=sa;Password=RootRoot.1; Encrypt=False;
            - name: ConnectionStringsMaster
              value: Data Source=sla-manager-db,1434;User ID=sa;Password=RootRoot.1;Encrypt=False;
            - name: HowManyPartition
              value: "1"
            - name: Jwt
              value: c5eKUcbKfkzGq6HfpnFhP7/G2pgS3S++YH33ue/A5uc=
            - name: bootstrapServers
              value: kafka:9093
            - name: groupID
              value: SLAManager
          image: mirco98/weathereventnotifier:sla-manager
          name: sla-manager
          ports:
            - containerPort: 8081
              hostPort: 8081
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: sla-manager-db
  name: sla-manager-db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: sla-manager-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: sla-manager-db
    spec:
      containers:
        - env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_PID
              value: Express
            - name: SA_PASSWORD
              value: RootRoot.1
          image: mcr.microsoft.com/mssql/server
          name: sla-manager-db
          ports:
            - containerPort: 1433
              hostPort: 1434
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/opt/mssql
              name: sla-manager-database
      restartPolicy: Always
      volumes:
        - name: sla-manager-database
          persistentVolumeClaim:
            claimName: sla-manager-database
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: sla-manager-database
  name: sla-manager-database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: sla-manager-service
  name: sla-manager-service
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: sla-manager-service
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: sla-manager-service
    spec:
      containers:
        - env:
            - name: DATABASE_IP
              value: sla-manager-db
            - name: DATABASE_NAME
              value: SLAManager
            - name: DATABASE_PASSWORD
              value: RootRoot.1
            - name: DATABASE_PORTA
              value: "1434"
            - name: DATABASE_USERNAME
              value: sa
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: PROMETHEUS_IP
              value: prometheus
          image: mirco98/weathereventnotifier:sla-manager-service
          name: sla-manager-service
          ports:
            - containerPort: 8082
              hostPort: 8082
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: telegram-db-part0
  name: telegram-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: telegram-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: telegram-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mirco98/weathereventnotifier:telegram-db-part0
          name: telegram-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3311
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: telegram-database-part0
      restartPolicy: Always
      volumes:
        - name: telegram-database-part0
          persistentVolumeClaim:
            claimName: telegram-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: telegram-database-part0
  name: telegram-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: telegram-service-part0
  name: telegram-service-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: telegram-service-part0
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: telegram-service-part0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: TelegramService
            - name: DATABASE_IP
              value: telegram-db-part0
            - name: DATABASE_NAME
              value: Telegram
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3311"
            - name: DATABASE_USERNAME
              value: root
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: TelegramService
            - name: HEARTBEAT_FREQUENCY
              value: "10"
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: TelegramService
            - name: SLAMANAGER
              value: sla-manager
          image: mirco98/weathereventnotifier:telegram-service-part0
          name: telegram-service-part0
          ports:
            - containerPort: 8088
              hostPort: 8088
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: weather-db-part0
  name: weather-db-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: weather-db-part0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: weather-db-part0
    spec:
      containers:
        - env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mirco98/weathereventnotifier:weather-db-part0
          name: weather-db-part0
          ports:
            - containerPort: 3306
              hostPort: 3312
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: weather-database-part0
      restartPolicy: Always
      volumes:
        - name: weather-database-part0
          persistentVolumeClaim:
            claimName: weather-database-part0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: weather-database-part0
  name: weather-database-part0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: weather-service-part0
  name: weather-service-part0
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: weather-service-part0
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: weather-service-part0
    spec:
      containers:
        - env:
            - name: CONSUMER_AUTO_OFFSET_RESET
              value: earliest
            - name: CONSUMER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: CONSUMER_GROUP_ID
              value: WeatherService
            - name: DATABASE_IP
              value: weather-db-part0
            - name: DATABASE_NAME
              value: Weather
            - name: DATABASE_PASSWORD
              value: root
            - name: DATABASE_PORTA
              value: "3312"
            - name: DATABASE_USERNAME
              value: root
            - name: DISTANCE_REUSE_WEATHER_KM
              value: "5"
            - name: DOCKER_ENVIRONMENT
              value: "True"
            - name: GROUP_ID
              value: WeatherService
            - name: HEARTBEAT_FREQUENCY
              value: "10"
            - name: PARTITION
              value: "0"
            - name: PRODUCER_BOOTSTRAP_SERVERS
              value: kafka:9093
            - name: PRODUCER_CLIENT_ID
              value: WeatherService
            - name: SLAMANAGER
              value: sla-manager
          image: mirco98/weathereventnotifier:weather-service-part0
          name: weather-service-part0
          ports:
            - containerPort: 8089
              hostPort: 8089
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "226492416"
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: zookeeper
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/microservices-network: "true"
        io.kompose.service: zookeeper
    spec:
      containers:
        - image: wurstmeister/zookeeper:latest
          name: zookeeper
          ports:
            - containerPort: 2181
              hostPort: 2181
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

