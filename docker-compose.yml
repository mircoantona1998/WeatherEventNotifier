version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - microservices-network
     
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_PORT: 9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "topic_to_scheduler:1:1,topic_to_weather:1:1,topic_to_mail:1:1,topic_to_telegram:1:1,topic_to_notifier:1:1,topic_to_configuration:1:1,topic_to_userdata:1:1,topic_to_manager:1:1,topic_to_forecast:1:1"  
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-data:/var/lib/kafka/data 
    depends_on:
      - zookeeper
    networks:
      - microservices-network     
      
  expose-api:
    extends:
      file: API/docker-compose.yml
      service: expose-api
    environment:
      - HowManyPartition=1
      - groupID=ExposeAPIService
      - bootstrapServers=kafka:9093
    networks:
      - microservices-network  
    depends_on:
      - kafka
     
  expose-api-db:
    extends:
      file: API/docker-compose.yml
      service: expose-api-db
      
      
  sla-manager:
    extends:
      file: SLAManager/docker-compose.yml
      service: sla-manager
    environment:
      - HowManyPartition=1
      - groupID=SLAManager
      - bootstrapServers=kafka:9093
    networks:
      - microservices-network  
    depends_on:
      - kafka
     
  sla-manager-db:
    extends:
      file: SLAManager/docker-compose.yml
      service: sla-manager-db
      
  sla-manager-service:
    container_name: sla-manager-service
    ports:
    - "8082:8082"
    build:
      context: ./SlaManagerService/app
      dockerfile: Dockerfile
    environment:
     - DOCKER_ENVIRONMENT=True
     - DATABASE_USERNAME=sa
     - DATABASE_PASSWORD=RootRoot.1
     - DATABASE_PORTA=1433
     - DATABASE_IP=sla-manager-db
     - DATABASE_NAME=SLAManager
     - PROMETHEUS_IP=prometheus
    networks:
      - microservices-network  
    depends_on:
      - kafka
      - sla-manager-db
      - sla-manager
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: '216M' 
          
  forecast-service:
    container_name: forecast-service
    ports:
    - "8083:8083"  
    build:
      context: ./ForecastService/app
      dockerfile: Dockerfile
    environment:
     - DOCKER_ENVIRONMENT=True
     - DATABASE_USERNAME=sa
     - DATABASE_PASSWORD=RootRoot.1
     - DATABASE_PORTA=1433
     - DATABASE_IP=sla-manager-db
     - DATABASE_NAME=SLAManager
     - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     - CONSUMER_GROUP_ID=ForecastService
     - CONSUMER_AUTO_OFFSET_RESET=earliest
     - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     - PRODUCER_CLIENT_ID=ForecastService
     - GROUP_ID=ForecastService
    networks:
      - microservices-network  
    depends_on:
      - kafka
      - sla-manager-db
      - sla-manager
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: '216M'          

  prometheus:
      image: prom/prometheus
      container_name: prometheus-service
      ports:
        - "9090:9090"
      networks:
        - microservices-network
      volumes:
        - ./Prometheus/promconfig.yml:/etc/prometheus/prometheus.yml
        - prometheus_data:/etc/prometheus/data
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--web.enable-lifecycle'
      depends_on:
        - expose-api  
 
  grafana:
    image: grafana/grafana
    container_name: grafana-service
    ports:
      - "3000:3000"
    restart: always 
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_DEFAULT_THEME=light
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,vertamedia-clickhouse-datasource
    networks:
      - microservices-network 
    volumes:
      - ./Grafana/data/:/var/lib/grafana
    depends_on:
      - prometheus
      - sla-manager-db
        
#to add a partition duplicate from this and change the PARTITION= last partition+1 and change the names
  configurator-service-part0:
    container_name: configurator-service-part0
    ports:
    - "8084:8084"  
    build:
      context: ./ConfiguratorService/app
      dockerfile: Dockerfile
    environment:
     - PARTITION=0
     - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     - CONSUMER_GROUP_ID=ConfiguratorService
     - CONSUMER_AUTO_OFFSET_RESET=earliest
     - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     - PRODUCER_CLIENT_ID=ConfiguratorService
     - GROUP_ID=ConfiguratorService
     - DOCKER_ENVIRONMENT=True
     - DATABASE_USERNAME=root
     - DATABASE_PASSWORD=root
     - DATABASE_PORTA=3306
     - DATABASE_IP=configurator-db-part0
     - DATABASE_NAME=ConfigurationAlert
     - SLAMANAGER=sla-manager
     - HEARTBEAT_FREQUENCY=10
    networks:
      - microservices-network  
    depends_on:
      - kafka
      - configurator-db-part0
      - sla-manager
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: '216M'  
             
          
  configurator-db-part0:
    container_name: configurator-db-part0
    build:
      context: ./ConfiguratorService/Configuratordata
      dockerfile: Dockerfile
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - configurator-database-part0:/var/lib/mysql
    networks:
      - microservices-network
    
  mail-service-part0:
    container_name: mail-service-part0
    ports:
    - "8085:8085"  
    build:
      context: ./MailService/app
      dockerfile: Dockerfile
    environment:
     - PARTITION=0
     - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     - CONSUMER_GROUP_ID=MailService
     - CONSUMER_AUTO_OFFSET_RESET=earliest
     - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     - PRODUCER_CLIENT_ID=MailService
     - GROUP_ID=MailService
     - DOCKER_ENVIRONMENT=True
     - DATABASE_USERNAME=root
     - DATABASE_PASSWORD=root
     - DATABASE_PORTA=3306
     - DATABASE_IP=mail-db-part0
     - DATABASE_NAME=Mail
     - SLAMANAGER=sla-manager
     - HEARTBEAT_FREQUENCY=10
    networks:
      - microservices-network  
    depends_on:
      - kafka
      - mail-db-part0
      - sla-manager
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: '216M'   
          
       
  mail-db-part0:
    container_name: mail-db-part0
    build:
      context: ./MailService/Maildata
      dockerfile: Dockerfile
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - mail-database-part0:/var/lib/mysql
    networks:
      - microservices-network  
       
  notifier-service-part0:
    container_name: notifier-service-part0
    ports:
    - "8086:8086"  
    build:
      context: ./NotifierService/app
      dockerfile: Dockerfile
    environment:
     - PARTITION=0
     - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     - CONSUMER_GROUP_ID=NotifierService
     - CONSUMER_AUTO_OFFSET_RESET=earliest
     - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     - PRODUCER_CLIENT_ID=NotifierService
     - GROUP_ID=NotifierService
     - DOCKER_ENVIRONMENT=True
     - DATABASE_USERNAME=root
     - DATABASE_PASSWORD=root
     - DATABASE_PORTA=3306
     - DATABASE_IP=notifier-db-part0
     - DATABASE_NAME=Notifier
     - SLAMANAGER=sla-manager
     - HEARTBEAT_FREQUENCY=10
    networks:
      - microservices-network  
    depends_on:
      - kafka
      - notifier-db-part0
      - sla-manager
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: '216M'        
          
          
  notifier-db-part0:
    container_name: notifier-db-part0
    build:
      context: ./NotifierService/Notifierdata
      dockerfile: Dockerfile
    ports:
      - "3309:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - notifier-database-part0:/var/lib/mysql
    networks:
      - microservices-network        
        
  scheduler-service-part0:
    container_name: scheduler-service-part0
    ports:
    - "8087:8087"  
    build:
      context: ./SchedulerService/app
      dockerfile: Dockerfile
    environment:
     - PARTITION=0
     - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     - CONSUMER_GROUP_ID=SchedulerService
     - CONSUMER_AUTO_OFFSET_RESET=earliest
     - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     - PRODUCER_CLIENT_ID=SchedulerService
     - GROUP_ID=SchedulerService
     - DOCKER_ENVIRONMENT=True
     - DATABASE_USERNAME=root
     - DATABASE_PASSWORD=root
     - DATABASE_PORTA=3306
     - DATABASE_IP=scheduler-db-part0
     - DATABASE_NAME=Scheduler
     - SLAMANAGER=sla-manager
     - HEARTBEAT_FREQUENCY=10
    networks:
      - microservices-network  
    depends_on:
      - kafka
      - scheduler-db-part0
      - sla-manager
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: '216M'            
      
  scheduler-db-part0:
    container_name: scheduler-db-part0
    build:
      context: ./SchedulerService/Schedulerdata
      dockerfile: Dockerfile
    ports:
      - "3310:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - scheduler-database-part0:/var/lib/mysql
    networks:
      - microservices-network  
       
  telegram-service-part0:
    container_name: telegram-service-part0
    ports:
    - "8088:8088"  
    build:
      context: ./TelegramService/app
      dockerfile: Dockerfile
    environment:
     - PARTITION=0
     - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     - CONSUMER_GROUP_ID=TelegramService
     - CONSUMER_AUTO_OFFSET_RESET=earliest
     - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     - PRODUCER_CLIENT_ID=TelegramService
     - GROUP_ID=TelegramService
     - DOCKER_ENVIRONMENT=True
     - DATABASE_USERNAME=root
     - DATABASE_PASSWORD=root
     - DATABASE_PORTA=3306
     - DATABASE_IP=telegram-db-part0
     - DATABASE_NAME=Telegram
     - SLAMANAGER=sla-manager
     - HEARTBEAT_FREQUENCY=10
    networks:
      - microservices-network  
    depends_on:
      - kafka
      - telegram-db-part0
      - sla-manager
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: '216M'       
      
  telegram-db-part0:
    container_name: telegram-db-part0
    build:
      context: ./TelegramService/Telegramdata
      dockerfile: Dockerfile
    ports:
      - "3311:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - telegram-database-part0:/var/lib/mysql
    networks:
      - microservices-network  
       
  weather-service-part0:
    container_name: weather-service-part0
    ports:
    - "8089:8089"  
    build:
      context: ./WeatherService/app
      dockerfile: Dockerfile
    environment:
     - PARTITION=0
     - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     - CONSUMER_GROUP_ID=WeatherService
     - CONSUMER_AUTO_OFFSET_RESET=earliest
     - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     - PRODUCER_CLIENT_ID=WeatherService
     - GROUP_ID=WeatherService
     - DOCKER_ENVIRONMENT=True
     - DATABASE_USERNAME=root
     - DATABASE_PASSWORD=root
     - DATABASE_PORTA=3306
     - DATABASE_IP=weather-db-part0
     - DATABASE_NAME=Weather
     - SLAMANAGER=sla-manager
     - HEARTBEAT_FREQUENCY=10
     - DISTANCE_REUSE_WEATHER_KM=5
    networks:
      - microservices-network  
    depends_on:
      - kafka
      - weather-db-part0 
      - sla-manager
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: '216M'  
          
      
  weather-db-part0:
    container_name: weather-db-part0
    build:
      context: ./WeatherService/Weatherdata
      dockerfile: Dockerfile
    ports:
      - "3312:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - weather-database-part0:/var/lib/mysql
    networks:
      - microservices-network
      
#to this  

#PARTITION 1  
  # configurator-service-part1:
    # container_name: configurator-service-part1
    # build:
      # context: ./ConfiguratorService/app
      # dockerfile: Dockerfile
    # environment:
     # - PARTITION=1
     # - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     # - CONSUMER_GROUP_ID=ConfiguratorService
     # - CONSUMER_AUTO_OFFSET_RESET=earliest
     # - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     # - PRODUCER_CLIENT_ID=ConfiguratorService
     # - GROUP_ID=ConfiguratorService
     # - DOCKER_ENVIRONMENT=True
     # - DATABASE_USERNAME=root
     # - DATABASE_PASSWORD=root
     # - DATABASE_PORTA=3306
     # - DATABASE_IP=configurator-db-part1
     # - DATABASE_NAME=ConfigurationAlert
     # - SLAMANAGER=sla-manager
     # - HEARTBEAT_FREQUENCY=10
    # networks:
      # - microservices-network  
    # depends_on:
      # - kafka
      # - configurator-db-part1
      # - sla-manager
    # deploy:
      # resources:
        # limits:
          # cpus: '0.2'  
          # memory: '216M'      
          

      
  # configurator-db-part1:
    # container_name: configurator-db-part1
    # build:
      # context: ./ConfiguratorService/Configuratordata
      # dockerfile: Dockerfile
    # ports:
      # - "3313:3306"
    # environment:
      # MYSQL_ROOT_PASSWORD: root
    # volumes:
      # - configurator-database-part1:/var/lib/mysql
    # networks:
      # - microservices-network     
   
  # mail-service-part1:
    # container_name: mail-service-part1
    # build:
      # context: ./MailService/app
      # dockerfile: Dockerfile
    # environment:
     # - PARTITION=1
     # - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     # - CONSUMER_GROUP_ID=MailService
     # - CONSUMER_AUTO_OFFSET_RESET=earliest
     # - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     # - PRODUCER_CLIENT_ID=MailService
     # - GROUP_ID=MailService
     # - DOCKER_ENVIRONMENT=True
     # - DATABASE_USERNAME=root
     # - DATABASE_PASSWORD=root
     # - DATABASE_PORTA=3306
     # - DATABASE_IP=mail-db-part1
     # - DATABASE_NAME=Mail
     # - SLAMANAGER=sla-manager
     # - HEARTBEAT_FREQUENCY=10
    # networks:
      # - microservices-network  
    # depends_on:
      # - kafka
      # - mail-db-part1 
      # - sla-manager
    # deploy:
      # resources:
        # limits:
          # cpus: '0.2'  
          # memory: '216M'        
          
      
  # mail-db-part1:
    # container_name: mail-db-part1
    # build:
      # context: ./MailService/Maildata
      # dockerfile: Dockerfile
    # ports:
      # - "3314:3306"
    # environment:
      # MYSQL_ROOT_PASSWORD: root
    # volumes:
      # - mail-database-part1:/var/lib/mysql
    # networks:
      # - microservices-network    
     
  # notifier-service-part1:
    # container_name: notifier-service-part1
    # build:
      # context: ./NotifierService/app
      # dockerfile: Dockerfile
    # environment:
     # - PARTITION=1
     # - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     # - CONSUMER_GROUP_ID=NotifierService
     # - CONSUMER_AUTO_OFFSET_RESET=earliest
     # - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     # - PRODUCER_CLIENT_ID=NotifierService
     # - GROUP_ID=NotifierService
     # - DOCKER_ENVIRONMENT=True
     # - DATABASE_USERNAME=root
     # - DATABASE_PASSWORD=root
     # - DATABASE_PORTA=3306
     # - DATABASE_IP=notifier-db-part1
     # - DATABASE_NAME=Notifier
     # - SLAMANAGER=sla-manager
     # - HEARTBEAT_FREQUENCY=10
    # networks:
      # - microservices-network  
    # depends_on:
      # - kafka
      # - notifier-db-part1 
      # - sla-manager
    # deploy:
      # resources:
        # limits:
          # cpus: '0.2'  
          # memory: '216M'
          
      
  # notifier-db-part1:
    # container_name: notifier-db-part1
    # build:
      # context: ./NotifierService/Notifierdata
      # dockerfile: Dockerfile
    # ports:
      # - "3315:3306"
    # environment:
      # MYSQL_ROOT_PASSWORD: root
    # volumes:
      # - notifier-database-part1:/var/lib/mysql
    # networks:
      # - microservices-network 
      
  # scheduler-service-part1:
    # container_name: scheduler-service-part1
    # build:
      # context: ./SchedulerService/app
      # dockerfile: Dockerfile
    # environment:
     # - PARTITION=1
     # - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     # - CONSUMER_GROUP_ID=SchedulerService
     # - CONSUMER_AUTO_OFFSET_RESET=earliest
     # - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     # - PRODUCER_CLIENT_ID=SchedulerService
     # - GROUP_ID=SchedulerService
     # - DOCKER_ENVIRONMENT=True
     # - DATABASE_USERNAME=root
     # - DATABASE_PASSWORD=root
     # - DATABASE_PORTA=3306
     # - DATABASE_IP=scheduler-db-part1
     # - DATABASE_NAME=Scheduler
     # - SLAMANAGER=sla-manager
     # - HEARTBEAT_FREQUENCY=10
    # networks:
      # - microservices-network  
    # depends_on:
      # - kafka
      # - scheduler-db-part1 
      # - sla-manager
    # deploy:
      # resources:
        # limits:
          # cpus: '0.2'  
          # memory: '216M'
          
      
  # scheduler-db-part1:
    # container_name: scheduler-db-part1
    # build:
      # context: ./SchedulerService/Schedulerdata
      # dockerfile: Dockerfile
    # ports:
      # - "3316:3306"
    # environment:
      # MYSQL_ROOT_PASSWORD: root
    # volumes:
      # - scheduler-database-part1:/var/lib/mysql
    # networks:
      # - microservices-network 
       
  # telegram-service-part1:
    # container_name: telegram-service-part1
    # build:
      # context: ./TelegramService/app
      # dockerfile: Dockerfile
    # environment:
     # - PARTITION=1
     # - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     # - CONSUMER_GROUP_ID=TelegramService
     # - CONSUMER_AUTO_OFFSET_RESET=earliest
     # - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     # - PRODUCER_CLIENT_ID=TelegramService
     # - GROUP_ID=TelegramService
     # - DOCKER_ENVIRONMENT=True
     # - DATABASE_USERNAME=root
     # - DATABASE_PASSWORD=root
     # - DATABASE_PORTA=3306
     # - DATABASE_IP=telegram-db-part1
     # - DATABASE_NAME=Telegram
     # - SLAMANAGER=sla-manager
     # - HEARTBEAT_FREQUENCY=10
    # networks:
      # - microservices-network  
    # depends_on:
      # - kafka
      # - telegram-db-part1 
      # - sla-manager
    # deploy:
      # resources:
        # limits:
          # cpus: '0.2'  
          # memory: '216M'     
          
      
  # telegram-db-part1:
    # container_name: telegram-db-part1
    # build:
      # context: ./TelegramService/Telegramdata
      # dockerfile: Dockerfile
    # ports:
      # - "3317:3306"
    # environment:
      # MYSQL_ROOT_PASSWORD: root
    # volumes:
      # - telegram-database-part1:/var/lib/mysql
    # networks:
      # - microservices-network 
     
  # weather-service-part1:
    # container_name: weather-service-part1
    # build:
      # context: ./WeatherService/app
      # dockerfile: Dockerfile
    # environment:
     # - PARTITION=1
     # - CONSUMER_BOOTSTRAP_SERVERS=kafka:9093
     # - CONSUMER_GROUP_ID=WeatherService
     # - CONSUMER_AUTO_OFFSET_RESET=earliest
     # - PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
     # - PRODUCER_CLIENT_ID=WeatherService
     # - GROUP_ID=WeatherService
     # - DOCKER_ENVIRONMENT=True
     # - DATABASE_USERNAME=root
     # - DATABASE_PASSWORD=root
     # - DATABASE_PORTA=3306
     # - DATABASE_IP=weather-db-part1
     # - DATABASE_NAME=Weather
     # - SLAMANAGER=sla-manager
     # - HEARTBEAT_FREQUENCY=10
    # networks:
      # - microservices-network  
    # depends_on:
      # - kafka
      # - weather-db-part1
      # - sla-manager
    # deploy:
      # resources:
        # limits:
          # cpus: '0.2'  
          # memory: '216M'  
          
      
  # weather-db-part1:
    # container_name: weather-db-part1
    # build:
      # context: ./WeatherService/Weatherdata
      # dockerfile: Dockerfile
    # ports:
      # - "3318:3306"
    # environment:
      # MYSQL_ROOT_PASSWORD: root
    # volumes:
      # - weather-database-part1:/var/lib/mysql
    # networks:
      # - microservices-network
 
#END PARTITION 1

volumes:
  userdata-database:
    name: userdata-database
  configurator-database-part0:  
    name: configurator-database-part0
  # configurator-database-part1:  
    # name: configurator-database-part1
  mail-database-part0:  
    name: mail-database-part0
  # mail-database-part1:  
    # name: mail-database-part1
  telegram-database-part0:  
    name: telegram-database-part0
  # telegram-database-part1:  
    # name: telegram-database-part1
  notifier-database-part0:
    name: notifier-database-part0
  # notifier-database-part1:
    # name: notifier-database-part1
  weather-database-part0:  
    name: weather-database-part0
  # weather-database-part1:  
    # name: weather-database-part1
  scheduler-database-part0:  
    name: scheduler-database-part0
  # scheduler-database-part1:  
    # name: scheduler-database-part1
  kafka-data:  
    name: kafka-data
  prometheus_data:
    name: prometheus_data
  sla-manager-database:
    name: sla-manager-database
networks:
  microservices-network:
    name: microservices-network
    driver: bridge


